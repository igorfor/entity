<?php

/**
 * @file
 * Module for the Notebook Entity - a starting point to create your own Entity
 * and associated administration interface
 */


/**
 * Implement hook_entity_info().
 */
function demo_entity_info() {
  $return['notebook'] = array(
    'label' => t('notebook'),
    'entity class' => 'Notebook',
    'controller class' => 'NotebookController',
    'base table' => 'notebook',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'notebook_id',
      'bundle' => 'type',
    ),

    'bundles' => array(),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'demo_create',
    'access callback' => 'demo_access',
    'module' => 'demo',
    'admin ui' => array(
      'path' => 'admin/content/notebooks',
      'controller class' => 'NotebookUIController',
      'menu wildcard' => '%notebook',
      'file' => 'demo.admin.inc',

    ),
  );

  $return['notebook_type'] = array(
    'label' => t('Notebook Type'),
    'entity class' => 'NotebookType',
    'controller class' => 'NotebookTypeController',
    'base table' => 'notebook_type',
    'fieldable' => FALSE,
    'bundle of' => 'notebook',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'demo_type_access',
    'module' => 'demo',
    'admin ui' => array(
      'path' => 'admin/structure/notebook_types',
      'file' => 'demo_type.admin.inc',
      'controller class' => 'NotebookTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 */
function demo_entity_info_alter(&$entity_info) {
  foreach (demo_get_types() as $type => $info) {
    $entity_info['notebook']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/notebook_types/manage/%notebook_type',
        'real path' => 'admin/structure/notebook_types/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer notebook types'),
      ),
    );
  }
}


/**
 * Implements hook_permission().
 */
function demo_permission() {
  $permissions = array(
    'administer notebook types' => array(
      'title' => t('Administer notebook types'),
      'description' => t('Create and delete fields for notebook types, and set their permissions.'),
    ),
    'administer notebooks' => array(
      'title' => t('Administer notebooks'),
      'description' => t('Edit and delete all notebooks'),
    ),
  );

  foreach (demo_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name model" => array(
        'title' => t('%type_name: Edit any notebook', array('%type_name' => $type->label)),
      ),
      "view any $type_name model" => array(
        'title' => t('%type_name: View any notebook', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;
}


/**
 * Determines whether the given user has access to a notebook.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $notebook
 *   Optionally a notebook or a notebook type to check access for. If nothing is
 *   given, access for all notebooks is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function demo_access($op, $notebook = NULL, $account = NULL) {
  if (user_access('administer notebooks', $account)) {
    return TRUE;
  }
  if (isset($notebook) && $type_name = $notebook->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name notebook", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function demo_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer notebook types', $account);
}


/**
 * Gets an array of all notebbok types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return NotebookType[]
 *   Depending whether $type isset, an array of notebook types or a single one.
 */
function demo_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('notebook_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}


/**
 * Menu argument loader; Load a notebook type by string.
 *
 * @param $type
 *   The machine-readable name of a notebook type to load.
 * @return
 *   A notebook type array or FALSE if $type does not exist.
 */
function demo_type_load($type) {
  return demo_get_types($type);
}


/**
 * Fetch a notebook object. Make sure that the wildcard you choose
 * in the notebook entity definition fits the function name here.
 *
 * @param $notebook_id
 *   Integer specifying the notebook id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $notebook object or FALSE if it cannot be loaded.
 *
 * @see demo_load_multiple()
 */
function demo_load($notebook_id, $reset = FALSE) {
  $notebooks = demo_load_multiple(array($notebook_id), array(), $reset);
  return reset($notebooks);
}


/**
 * Load multiple notebooks based on certain conditions.
 *
 * @param $notebook_ids
 *   An array of notebook IDs.
 * @param $conditions
 *   An array of conditions to match against the {notebook} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of notebook objects, indexed by notebook_id.
 *
 * @see entity_load()
 * @see demo_load()
 */
function demo_load_multiple($notebook_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('model', $notebook_ids, $conditions, $reset);
}


/**
 * Deletes a notebook.
 */
function demo_delete(Notebook $notebook) {
  $notebook->delete();
}


/**
 * Delete multiple notebooks.
 *
 * @param $notebook_ids
 *   An array of notebook IDs.
 */
function demo_delete_multiple(array $notebook_ids) {
  entity_get_controller('notebook')->delete($notebook_ids);
}


/**
 * Create a notebook object.
 */
function demo_create($values = array()) {
  return entity_get_controller('notebook')->create($values);
}


/**
 * Saves a notebook to the database.
 *
 * @param $notebook
 *   The notebook object.
 */
function demo_save(Notebook $Notebook) {
  return $notebook->save();
}


/**
 * Saves a notebook type to the db.
 */
function demo_type_save(NotebookType $type) {
  $type->save();
}


/**
 * Deletes a notebook type from the db.
 */
function demo_type_delete(NotebookType $type) {
  $type->delete();
}


/**
 * URI callback for notebooks
 */
function demo_uri(Notebook $notebook){
  return array(
    'path' => 'model/' . $notebook->notebook_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function demo_page_title(Notebook $notebook){
  return $notebook->name;
}


/**
 * Sets up content to show an individual notebook
 */
function demo_page_view($notebook, $view_mode = 'full') {
  $controller = entity_get_controller('notebook');
  $content = $controller->view(array($notebook->notebook_id => $notebook));
  drupal_set_title($notebook->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function demo_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'model') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function demo_theme() {
  return array(
    'notebook_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'demo.admin.inc',
    ),
    'notebook' => array(
      'render element' => 'elements',
      'template' => 'notebook',
    ),
    'notebook_sample_data' => array(
      'variables' => array('notebook_sample_data', 'notebook' => NULL),
      'template' => 'notebook-sample-data',
    ),


  );
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function demo_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/content/notebooks') {
    $item = menu_get_item('admin/content/notebooks/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


/**
 * The class used for notebook entities
 */
class Notebook extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'model');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'notebook/' . $this->notebook_id);
  }


}


/**
 * The class used for notebook type entities
 */
class NotebookType extends Entity {

  public $type;
  public $label;

  public function __construct($values = array()) {
    parent::__construct($values, 'notebook_type');
  }

}


/**
 * The Controller for notebook entities
 */
class NotebookController extends EntityAPIController {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array(
      'model_id' => '',
      'is_new' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => '',
    );

    $notebook = parent::create($values);
    return $notebook;
  }

  /**
   * Overriding the buldContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    $content['notebook_sample_data'] =  array(
      '#markup' => theme('notebook_sample_data', array('notebook_sample_data' => check_plain($entity->data['sample_data']), 'notebook' => $entity)),
    );

    return $content;
  }

}


/**
 * The Controller for Model entities
 */
class NotebookTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  /**
   * @param $type
   *   The machine-readable type of the notebook.
   *
   * @return
   *   A model type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array(
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $notebook_type = parent::create($values);
    return $notebook_type;
  }

}
